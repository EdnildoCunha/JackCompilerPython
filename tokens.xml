<class>
  <keyword>class</keyword>
  <identifier>Square</identifier>
  <symbol>{</symbol>
  <keyword>field</keyword>
<varStatement>
  <keyword>int</keyword>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>;</symbol>
  <keyword>field</keyword>
</varStatement>
<varStatement>
  <keyword>int</keyword>
  <identifier>size</identifier>
  <symbol>;</symbol>
  <keyword>constructor</keyword>
</varStatement>
<compileSubroutineDec>
  <identifier>Square</identifier>
  <identifier>new</identifier>
  <symbol>(</symbol>
  <keyword>int</keyword>
<compileParameterList>
  <identifier>Ax</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>Ay</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>Asize</identifier>
  <symbol>)</symbol>
</compileParameterList>
  <symbol>{</symbol>
  <keyword>let</keyword>
<compileStatements>
<letStatement>
  <identifier>x</identifier>
  <symbol>=</symbol>
  <identifier>Ax</identifier>
<expression>
<compileTerm>
  <symbol>;</symbol>
</compileTerm>
</expression>
  <keyword>let</keyword>
</letStatement>
<letStatement>
  <identifier>y</identifier>
  <symbol>=</symbol>
  <identifier>Ay</identifier>
<expression>
<compileTerm>
  <symbol>;</symbol>
</compileTerm>
</expression>
  <keyword>let</keyword>
</letStatement>
<letStatement>
  <identifier>size</identifier>
  <symbol>=</symbol>
  <identifier>Asize</identifier>
<expression>
<compileTerm>
  <symbol>;</symbol>
</compileTerm>
</expression>
  <keyword>do</keyword>
</letStatement>
<doStatement>
  <identifier>draw</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
</doStatement>
</compileStatements>
  <symbol>;</symbol>
</compileSubroutineDec>
  <identifier>return</identifier>
  <identifier>x</identifier>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <keyword>method</keyword>
<compileSubroutineDec>
  <keyword>void</keyword>
  <identifier>dispose</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <keyword>do</keyword>
<compileStatements>
<doStatement>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>deAlloc</identifier>
</doStatement>
</compileStatements>
  <symbol>(</symbol>
</compileSubroutineDec>
  <identifier>x</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <identifier>return</identifier>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <keyword>method</keyword>
<compileSubroutineDec>
  <keyword>void</keyword>
  <identifier>draw</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <keyword>do</keyword>
<compileStatements>
<doStatement>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>setColor</identifier>
</doStatement>
</compileStatements>
  <symbol>(</symbol>
</compileSubroutineDec>
  <identifier>x</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <identifier>return</identifier>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <keyword>method</keyword>
<compileSubroutineDec>
  <keyword>void</keyword>
  <identifier>erase</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <keyword>do</keyword>
<compileStatements>
<doStatement>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>setColor</identifier>
</doStatement>
</compileStatements>
  <symbol>(</symbol>
</compileSubroutineDec>
  <identifier>x</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <identifier>return</identifier>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <keyword>method</keyword>
<compileSubroutineDec>
  <keyword>void</keyword>
  <identifier>incSize</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <keyword>if</keyword>
<compileStatements>
<ifStatement>
  <symbol>(</symbol>
  <identifier>x</identifier>
<expression>
<compileTerm>
  <symbol>)</symbol>
</compileTerm>
</expression>
  <symbol>{</symbol>
  <keyword>do</keyword>
<compileStatements>
<doStatement>
  <identifier>erase</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
</doStatement>
</compileStatements>
  <symbol>;</symbol>
</ifStatement>
</compileStatements>
  <keyword>let</keyword>
</compileSubroutineDec>
  <identifier>size</identifier>
  <symbol>=</symbol>
  <identifier>size</identifier>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>draw</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <identifier>return</identifier>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <keyword>method</keyword>
<compileSubroutineDec>
  <keyword>void</keyword>
  <identifier>decSize</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <keyword>if</keyword>
<compileStatements>
<ifStatement>
  <symbol>(</symbol>
  <identifier>size</identifier>
<expression>
<compileTerm>
  <symbol>)</symbol>
</compileTerm>
</expression>
  <symbol>{</symbol>
  <keyword>do</keyword>
<compileStatements>
<doStatement>
  <identifier>erase</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
</doStatement>
</compileStatements>
  <symbol>;</symbol>
</ifStatement>
</compileStatements>
  <keyword>let</keyword>
</compileSubroutineDec>
  <identifier>size</identifier>
  <symbol>=</symbol>
  <identifier>size</identifier>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>draw</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <identifier>return</identifier>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <keyword>method</keyword>
<compileSubroutineDec>
  <keyword>void</keyword>
  <identifier>moveUp</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <keyword>if</keyword>
<compileStatements>
<ifStatement>
  <symbol>(</symbol>
  <identifier>y</identifier>
<expression>
<compileTerm>
  <symbol>)</symbol>
</compileTerm>
</expression>
  <symbol>{</symbol>
  <keyword>do</keyword>
<compileStatements>
<doStatement>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>setColor</identifier>
</doStatement>
</compileStatements>
  <symbol>(</symbol>
</ifStatement>
</compileStatements>
  <identifier>x</identifier>
</compileSubroutineDec>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>let</keyword>
  <identifier>y</identifier>
  <symbol>=</symbol>
  <identifier>y</identifier>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>setColor</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <identifier>return</identifier>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <keyword>method</keyword>
<compileSubroutineDec>
  <keyword>void</keyword>
  <identifier>moveDown</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <keyword>if</keyword>
<compileStatements>
<ifStatement>
  <symbol>(</symbol>
  <identifier>y</identifier>
<expression>
<compileTerm>
  <symbol>)</symbol>
</compileTerm>
</expression>
  <symbol>{</symbol>
  <keyword>do</keyword>
<compileStatements>
<doStatement>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>setColor</identifier>
</doStatement>
</compileStatements>
  <symbol>(</symbol>
</ifStatement>
</compileStatements>
  <identifier>x</identifier>
</compileSubroutineDec>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>let</keyword>
  <identifier>y</identifier>
  <symbol>=</symbol>
  <identifier>y</identifier>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>setColor</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <identifier>return</identifier>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <keyword>method</keyword>
<compileSubroutineDec>
  <keyword>void</keyword>
  <identifier>moveLeft</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <keyword>if</keyword>
<compileStatements>
<ifStatement>
  <symbol>(</symbol>
  <identifier>x</identifier>
<expression>
<compileTerm>
  <symbol>)</symbol>
</compileTerm>
</expression>
  <symbol>{</symbol>
  <keyword>do</keyword>
<compileStatements>
<doStatement>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>setColor</identifier>
</doStatement>
</compileStatements>
  <symbol>(</symbol>
</ifStatement>
</compileStatements>
  <identifier>x</identifier>
</compileSubroutineDec>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>let</keyword>
  <identifier>x</identifier>
  <symbol>=</symbol>
  <identifier>x</identifier>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>setColor</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <identifier>return</identifier>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <keyword>method</keyword>
<compileSubroutineDec>
  <keyword>void</keyword>
  <identifier>moveRight</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <keyword>if</keyword>
<compileStatements>
<ifStatement>
  <symbol>(</symbol>
  <identifier>x</identifier>
<expression>
<compileTerm>
  <symbol>)</symbol>
</compileTerm>
</expression>
  <symbol>{</symbol>
  <keyword>do</keyword>
<compileStatements>
<doStatement>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>setColor</identifier>
</doStatement>
</compileStatements>
  <symbol>(</symbol>
</ifStatement>
</compileStatements>
  <identifier>x</identifier>
</compileSubroutineDec>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>let</keyword>
  <identifier>x</identifier>
  <symbol>=</symbol>
  <identifier>x</identifier>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>setColor</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>)</symbol>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <identifier>return</identifier>
  <symbol>;</symbol>
  <symbol>}</symbol>
  <symbol>}</symbol>
</class>
